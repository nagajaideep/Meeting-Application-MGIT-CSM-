<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Dogeller</title>
  <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,700&display=swap" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
  <script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="logo-container">
        <h1 class="logo-text">
          Doge<span class="logo-highlight">ller</span>
        </h1>
      </div>
    </header>
    <div class="content-container">
      <div class="active-users-panel" id="active-user-container">
        <h3 class="panel-title">Active Users:</h3>
      </div>
      <div class="video-chat-container">
        <h2 class="talk-info" id="talking-with-info">
          Select active user on the left menu.
        </h2>


        <div class="video-container">
          <video height="200px" autoplay class="remote-video" id="remote-video"></video>
          <video height="200px" autoplay muted class="local-video" id="local-video"></video>
        </div>


        <div id="call-container" style="border: 1px solid; margin: 5px; padding: 5px;">
          <p id="callerId"></p>
          <button id="callButton"> Call Now</button>
        </div>

        <button id="hang-up-button" style="width: 500px; height: 50px;"> Hang Up</button>

      </div>
    </div>
  </div>

  <script>

    function getLocalStream() {
      navigator.mediaDevices
        .getUserMedia({ video: false, audio: true })
        .then((stream) => {
          console.log(stream)
          window.localStream = stream; // A
          window.localAudio.srcObject = stream; // B
          window.localAudio.autoplay = true; // C

        })
        .catch((err) => {
          console.error(`you got an error: ${err}`);
        });
    }

    //getLocalStream();




    navigator.getUserMedia(
      { video: true, audio: true },
      (stream) => {
        window.localStream = stream;
        const localVideo = document.getElementById("local-video");
        if (localVideo) {
          localVideo.srcObject = stream;
        }
      },
      (error) => {
        console.warn(error.message);
      }
    );



    let peer = new Peer(`${Math.floor(Math.random() * 10000)}`, {
      host: location.hostname,
    });

    window.peer = peer;


    peer.on("open", () => {
      console.log("Your device ID is: " + peer.id)
    })



    function showCallContent() {
      let calledElem = document.getElementById("callerId");
      let callButton = document.getElementById("callButton");

      calledElem.innerText = "Your device Id: " + peer.id;
    }


    function showConnectedContent() {
      let callButton = document.getElementById("callButton");
      callButton.hidden = true;
    }

    showCallContent()


    let code;
    function getStreamCode() {
      code = prompt("Please enter the sharing code")
    }

    let conn;
    function connectPeers() {
      conn = peer.connect(code)
    }




    peer.on("connection", (connection) => {
      conn = connection;

      conn.on("close", () => {
        console.log("Call hung up.")
      })

      conn.on('error', (err) => {
        console.error('Error closing connection:', err);
      });
    })




    let callButton = document.getElementById("callButton");
    callButton.addEventListener("click", () => {
      getStreamCode();
      connectPeers();
      const call = peer.call(code, window.localStream);
      let remoteVideo = document.getElementById("remote-video");
      call.on("stream", (stream) => {
        remoteVideo.srcObject = stream;
        remoteVideo.autoplay = true;
        remoteVideo.peerStream = stream;
      })
      showConnectedContent();

    })


    let _call;
    peer.on("call", (call) => {
      const answerCall = confirm("Do you want to answer ?");

      if (answerCall) {
        call.answer(window.localStream);
        showConnectedContent();
        call.on("stream", (stream) => {
          let remoteVideo = document.getElementById("remote-video");
          remoteVideo.srcObject = stream;
          remoteVideo.autoplay = true;
          remoteVideo.peerStream = stream;
        })
        _call = call
      } else {
        console.log("Call denied")
      }
    })

    



    let hangUPBtn = document.getElementById("hang-up-button");
    hangUPBtn.addEventListener("click", () => {
      _call.close();
      showCallContent();
    })

















    /*
    
        socket.on("update-user-list", ({ users }) => {
         })
    
        socket.on("remove-user", ({ socketId }) => {
          let elementToRemove = document.getElementById(socketId);
          if (elementToRemove) {
            elementToRemove.remove();
          }
    
        })
    
        socket.on("call-made", async (data) => {
          await peerConnection.setRemoteDescription(
            new RTCSessionDescription(data.offer)
          )
    
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(new RTCSessionDescription(answer));
    
          socket.emit("make-answer", {
            answer,
            to: data.socket
          })
        })
    
    
        socket.on("answer-made", async (data) => {
          await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
        })
        */


  </script>

</body>

</html>